name: jenkins-ecs-terraform-apply

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - "main"
    paths:
      - "terraform/jenkins-ecs/*"
  pull_request:
    types:
      - closed
    branches:
      - "main"
    paths:
      - "terraform/jenkins-ecs/*"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      docker_image_tag:
        description: "Jenkins Image to Deploy to ECS"
        required: true
        default: "shanali38/aws-terraform-jenkins:latest"
        type: string

jobs:
  terraform-apply:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/jenkins-ecs

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Install the preferred version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.0

      # Runs a set of commands using the runners shell
      - name: Check Terraform Install
        run: terraform -version

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      # On push to main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -var="docker_image=${{ github.event.inputs.docker_image_tag }} " -auto-approve
